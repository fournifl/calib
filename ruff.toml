# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.8
target-version = "py39"

[lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = [
    "F",              #pyflake rules
    "E4", "E7", "E9", #Enable the stable subset of pycodestyle
    "E501",           #line too long
    "I",              #isort, sorting imports
    "N",              #variable and classes naming conventions
    "D",              #docstrings style conventions
    "UP",             #pyupgrade
    "ASYNC",          #flake8-async, check common mistakes related to async code
    "BLE",            #flake8-blind-except, do not blindly catch all exceptions !
    "FBT",            #avoid boolean traps
    "B",              #flake8's Bugbear
    "A",              #flake8-builtins, avoid shadowing builtin names
    "C4",             #flake8-comprehensions list comprehensions
    "T10",            #flake8-debugger : no debugger in production code !
    "EM",             #flake8-errmsg error message formating
    "FA",             #flake8-future-annotations
    "ICN",            #flake8-import-conventions
    "PIE",            #flake8-pie
    "PT",             #flake8-pytest-style
    "SIM",            #flake8-simplify
    "TID",            #flake8-tidy-imports
    "ARG",            #flake8-unused-arguments
    "PTH",            #flake8-use-pathlib
    "ERA",            #no dead (commented out) code
    "RUF100",         #check unused noqa
]

ignore = [
    "D1", # Ignore missing docstrings
    "D206", "D300", #Conflict with ruff formatter
    "D417", # no need to document every single function parameter
    "E501"
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = [
    "UP",
    "B",
    "SIM",
]


# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[lint.pydocstyle]
convention = "google"

[lint.pycodestyle]
# E501 reports lines that exceed the length of 100.
max-line-length = 100


[format]

# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"
